# Turing machine codes for the exercises in Activity 4.1
# Authors:
# Iker Garcia German
# Andres Tarazona Solloa


# Turing machine code for recognizing the language {1^n0^n1^n | n >= 1}

# Input examples: 111000111, 111100001111
input: '111000111'
blank: ' '
start state: q0

# Transition rules
table:
  q0:
    1: {write: X, R: q1}  # Mark the first sequence of '1' as 'X'
    Y: {R: scan}          # If symbol is 'Y', move to scan state
  q1:
    [1, X, Y]: R          # Skip over '1's and 'X' symbols
    0: {write: Y, R: q01} # Replace '0' with 'Y', move to q01 state
    Z: {R: inv}           # If symbol is 'Z', move to inv state
  q01:
    [0, Y, Z]: R           # Skip over '0's, 'Y', and 'Z' symbols
    1: {write: Z, R: back} # Replace '1' with 'Z', move to back state
    ' ': {R: inv}          # If symbol is blank, move to inv state
  back:
    [1, 0, Y, Z, ' ']: L  # Move left until reaching the leftmost non-blank symbol
    X: {R: q0}            # If symbol is 'X', move back to q0 state
  scan:
    [Y, Z]: R             # Skip over 'Y' and 'Z' symbols
    [0, 1]: {R: inv}      # If symbol is '0' or '1', move to inv state
    ' ': {R: accept}      # If symbol is blank, move to accept state
  accept:
  inv:
####################################################################################################
# Turing machine code for recognizing the language ww^R

# Accepts palindromes made of the symbols '0' and '1'
input: '0110' # try 0, 01, 101, 11011
blank: ' '
start state: start
synonyms:
  accept: {R: accept}
  reject: {R: reject}
# A palindrome is either the empty string, a single symbol,
# or a (shorter) palindrome with the same symbol added to both ends.
table:
  start:
    0: {write: ' ', R: have0}
    1: {write: ' ', R: have1}
    ' ': accept # empty string
  have0:
    [0, 1]: R
    ' ': {L: match0}
  have1:
    [0, 1]: R
    ' ': {L: match1}
  match0:
    0: {write: ' ', L: back} # same symbol at both ends
    1: reject
    ' ': accept # single symbol
  match1:
    0: reject
    1: {write: ' ', L: back} # same symbol at both ends
    ' ': accept # single symbol
  back:
    [0, 1]: L
    ' ': {R: start}
  accept:
  reject:
####################################################################################################
# Adds 1 to a binary number.
input: '1111111111-1'
blank: ' '
start state: travel_to_end
table:
  subtract_first:
    [1]: {write: ' ', R: travel_to_end}
  travel_to_end:
    [' ']: {L: subtract_second}
    [1, '-']: R
  subtract_second:
    [1]: {write: ' ', L: travel_to_beginning}
    ['-']: {write: ' ', L: done}
  travel_to_beginning:
    ['-', 1]: L
    [' ']: {R: subtract_first}
  done:
####################################################################################################